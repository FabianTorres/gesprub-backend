name: Build and Deploy Backend

# --- DISPARADORES ---
# Este flujo se ejecutará en cambios a las ramas 'main' o 'develop'
on:
  push:
    branches:
      - main 
      - develop

# --- VARIABLES GLOBALES ---
# Nombres de tus recursos. El valor real de los secretos se tomará del lugar correcto.
env:
  AZURE_CONTAINER_REGISTRY_CERT: 'registrogesprubbackend' # Reemplaza si tu ACR de certificación tiene otro nombre
  AZURE_CONTAINER_REGISTRY_PROD: 'registrogesprubprod'
  IMAGE_NAME: 'gesprub-backend'
  # Añade aquí los nombres de tus apps y grupos de recursos para cada entorno
  RESOURCE_GROUP_CERT: 'gesprub' # Nombre del grupo de recursos de certificación
  CONTAINER_APP_CERT: 'gesprub-backend-app' # Nombre de la app de certificación
  RESOURCE_GROUP_PROD: 'gesprub-prod-rg'
  CONTAINER_APP_PROD: 'gesprub-backend-app-prod'


jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    # --- SELECCIÓN DE ENTORNO ---
    # Si la rama es 'main', usa el entorno 'production' y sus secretos.
    # Si no, usa los secretos a nivel de repositorio (para certificación).
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || '' }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # --- LÓGICA DE SELECCIÓN ---
    # Determina qué nombres de recursos usar basado en la rama actual
    - name: Set environment-specific variables
      run: |
        if [ "${{ github.ref }}" == "refs/heads/main" ]; then
          echo "ACR_NAME=${{ env.AZURE_CONTAINER_REGISTRY_PROD }}" >> $GITHUB_ENV
          echo "RESOURCE_GROUP=${{ env.RESOURCE_GROUP_PROD }}" >> $GITHUB_ENV
          echo "CONTAINER_APP=${{ env.CONTAINER_APP_PROD }}" >> $GITHUB_ENV
        else
          echo "ACR_NAME=${{ env.AZURE_CONTAINER_REGISTRY_CERT }}" >> $GITHUB_ENV
          echo "RESOURCE_GROUP=${{ env.RESOURCE_GROUP_CERT }}" >> $GITHUB_ENV
          echo "CONTAINER_APP=${{ env.CONTAINER_APP_CERT }}" >> $GITHUB_ENV
        fi

    # --- PASO DE LOGIN A AZURE ---
    # Necesitamos credenciales para desplegar. Esto se hace con un Service Principal.
    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }} # Crearemos este secreto en el siguiente paso

    # --- PASO DE LOGIN A ACR ---
    # Usa los secretos correctos (de producción o certificación)
    - name: Log in to Azure Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.ACR_NAME }}.azurecr.io
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    # --- PASO DE CONSTRUCCIÓN Y PUSH ---
    # No cambia, solo usa las variables que definimos antes
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest
          ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}

    # --- PASO DE DESPLIEGUE ---
    # Apunta a la Container App correcta usando las variables de entorno
    - name: Deploy to Azure Container App
      uses: azure/container-apps-deploy@v1
      with:
        resourceGroup: ${{ env.RESOURCE_GROUP }}
        containerAppName: ${{ env.CONTAINER_APP }}
        imageToDeploy: ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest