# Nombre del flujo de trabajo que aparecer치 en la pesta침a "Actions" de GitHub
name: Build and Push to Azure Container Registry

# ---- DISPARADOR ----
# Este flujo de trabajo se ejecutar치 cada vez que hagas un 'push' a la rama 'main'
on:
  push:
    branches: [ "main" ]

# ---- VARIABLES DE ENTORNO ----
# Configura estas variables con los nombres de tus recursos en Azure
env:
  AZURE_CONTAINER_REGISTRY: 'registrogesprubbackend' # 游녣 REEMPLAZA con el nombre de tu ACR
  IMAGE_NAME: 'gesprub-backend'          # 游녣 REEMPLAZA con el nombre que quieras para tu imagen

# ---- TRABAJOS (JOBS) ----
# Define una secuencia de trabajos a ejecutar
jobs:
  build-and-push-image:
    # El trabajo se ejecutar치 en una m치quina virtual de Ubuntu proporcionada por GitHub
    runs-on: ubuntu-latest
    
    # Pasos que se ejecutar치n en orden
    steps:
    # 1. Clona tu repositorio en la m치quina virtual
    - name: Checkout repository
      uses: actions/checkout@v4

    # 2. Inicia sesi칩n en tu Azure Container Registry
    - name: Log in to Azure Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    # 3. Construye y sube la imagen Docker
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        # Etiqueta la imagen con un n칰mero 칰nico de ejecuci칩n de GitHub (ej: miacr칰nico.azurecr.io/gesprub-backend:12)
        tags: |
          ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:latest
          ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.run_number }}
        # Tambi칠n la etiqueta como la m치s reciente ('latest')
        labels: "run-number=${{ github.run_number }}"
