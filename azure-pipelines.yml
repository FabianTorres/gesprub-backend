# Pipeline para construir, dockerizar y desplegar el backend de Gesprub

trigger:
- main

variables:
  # --- Nombre de tu conexión de servicio a Azure ---
  azureSubscription: 'AzureConexionBackend'

  # --- Variables personalizadas para tu proyecto ---
  containerRegistry: 'registrogesprubbackend.azurecr.io'
  imageRepository: 'gesprub-backend'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  containerAppName: 'gesprub-backend-app'
  resourceGroup: 'gesprub'
  location: 'East US 2'
  tag: '$(Build.BuildId)'

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: Build
  displayName: 'Construir y Subir Imagen Docker'
  jobs:
  - job: Build
    displayName: 'Build & Push'
    steps:
    - task: Maven@3
      displayName: 'Build con Maven'
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'package'
        options: '-DskipTests'
        publishJUnitResults: false
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.21'

    # --- CAMBIO IMPORTANTE: PASOS DE DOCKER SEPARADOS ---

    # Paso 2.1: Iniciar sesión en Azure Container Registry
    - task: Docker@2
      displayName: 'Login to ACR'
      inputs:
        command: 'login'
        containerRegistry: $(containerRegistry)

    # Paso 2.2: Construir la imagen de Docker
    - task: Docker@2
      displayName: 'Build Docker image'
      inputs:
        command: 'build'
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        tags: |
          $(tag)

    # Paso 2.3: Subir la imagen a ACR
    - task: Docker@2
      displayName: 'Push image to ACR'
      inputs:
        command: 'push'
        repository: $(imageRepository)
        # La tarea ya sabe a qué registro subirla porque hicimos login antes
        tags: |
          $(tag)

- stage: Deploy
  displayName: 'Desplegar en Azure Container Apps'
  jobs:
  - job: Deploy
    displayName: 'Desplegar'
    steps:
    - task: AzureContainerApps@1
      displayName: 'Crear o Actualizar Container App'
      inputs:
        azureSubscription: $(azureSubscription)
        containerAppName: $(containerAppName)
        imageToDeploy: '$(containerRegistry)/$(imageRepository):$(tag)'
        ingress: 'external'
        targetPort: 8090
